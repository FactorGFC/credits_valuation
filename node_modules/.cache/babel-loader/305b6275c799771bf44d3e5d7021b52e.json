{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/* =========================================================\n * bootstrap-datepicker.js\n * Repo: https://github.com/uxsolutions/bootstrap-datepicker/\n * Demo: https://eternicode.github.io/bootstrap-datepicker/\n * Docs: https://bootstrap-datepicker.readthedocs.org/\n * =========================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') {\n    factory(require('jquery'));\n  } else {\n    factory(jQuery);\n  }\n})(function ($, undefined) {\n  function UTCDate() {\n    return new Date(Date.UTC.apply(Date, arguments));\n  }\n\n  function UTCToday() {\n    var today = new Date();\n    return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());\n  }\n\n  function isUTCEquals(date1, date2) {\n    return date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate();\n  }\n\n  function alias(method, deprecationMsg) {\n    return function () {\n      if (deprecationMsg !== undefined) {\n        $.fn.datepicker.deprecated(deprecationMsg);\n      }\n\n      return this[method].apply(this, arguments);\n    };\n  }\n\n  function isValidDate(d) {\n    return d && !isNaN(d.getTime());\n  }\n\n  var DateArray = function () {\n    var extras = {\n      get: function get(i) {\n        return this.slice(i)[0];\n      },\n      contains: function contains(d) {\n        // Array.indexOf is not cross-browser;\n        // $.inArray doesn't work with Dates\n        var val = d && d.valueOf();\n\n        for (var i = 0, l = this.length; i < l; i++) {\n          // Use date arithmetic to allow dates with different times to match\n          if (0 <= this[i].valueOf() - val && this[i].valueOf() - val < 1000 * 60 * 60 * 24) return i;\n        }\n\n        return -1;\n      },\n      remove: function remove(i) {\n        this.splice(i, 1);\n      },\n      replace: function replace(new_array) {\n        if (!new_array) return;\n        if (!$.isArray(new_array)) new_array = [new_array];\n        this.clear();\n        this.push.apply(this, new_array);\n      },\n      clear: function clear() {\n        this.length = 0;\n      },\n      copy: function copy() {\n        var a = new DateArray();\n        a.replace(this);\n        return a;\n      }\n    };\n    return function () {\n      var a = [];\n      a.push.apply(a, arguments);\n      $.extend(a, extras);\n      return a;\n    };\n  }(); // Picker object\n\n\n  var Datepicker = function Datepicker(element, options) {\n    $.data(element, 'datepicker', this);\n    this._events = [];\n    this._secondaryEvents = [];\n\n    this._process_options(options);\n\n    this.dates = new DateArray();\n    this.viewDate = this.o.defaultViewDate;\n    this.focusDate = null;\n    this.element = $(element);\n    this.isInput = this.element.is('input');\n    this.inputField = this.isInput ? this.element : this.element.find('input');\n    this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .input-group-append, .input-group-prepend, .btn') : false;\n    if (this.component && this.component.length === 0) this.component = false;\n    this.isInline = !this.component && this.element.is('div');\n    this.picker = $(DPGlobal.template); // Checking templates and inserting\n\n    if (this._check_template(this.o.templates.leftArrow)) {\n      this.picker.find('.prev').html(this.o.templates.leftArrow);\n    }\n\n    if (this._check_template(this.o.templates.rightArrow)) {\n      this.picker.find('.next').html(this.o.templates.rightArrow);\n    }\n\n    this._buildEvents();\n\n    this._attachEvents();\n\n    if (this.isInline) {\n      this.picker.addClass('datepicker-inline').appendTo(this.element);\n    } else {\n      this.picker.addClass('datepicker-dropdown dropdown-menu');\n    }\n\n    if (this.o.rtl) {\n      this.picker.addClass('datepicker-rtl');\n    }\n\n    if (this.o.calendarWeeks) {\n      this.picker.find('.datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear').attr('colspan', function (i, val) {\n        return Number(val) + 1;\n      });\n    }\n\n    this._process_options({\n      startDate: this._o.startDate,\n      endDate: this._o.endDate,\n      daysOfWeekDisabled: this.o.daysOfWeekDisabled,\n      daysOfWeekHighlighted: this.o.daysOfWeekHighlighted,\n      datesDisabled: this.o.datesDisabled\n    });\n\n    this._allow_update = false;\n    this.setViewMode(this.o.startView);\n    this._allow_update = true;\n    this.fillDow();\n    this.fillMonths();\n    this.update();\n\n    if (this.isInline) {\n      this.show();\n    }\n  };\n\n  Datepicker.prototype = {\n    constructor: Datepicker,\n    _resolveViewName: function _resolveViewName(view) {\n      $.each(DPGlobal.viewModes, function (i, viewMode) {\n        if (view === i || $.inArray(view, viewMode.names) !== -1) {\n          view = i;\n          return false;\n        }\n      });\n      return view;\n    },\n    _resolveDaysOfWeek: function _resolveDaysOfWeek(daysOfWeek) {\n      if (!$.isArray(daysOfWeek)) daysOfWeek = daysOfWeek.split(/[,\\s]*/);\n      return $.map(daysOfWeek, Number);\n    },\n    _check_template: function _check_template(tmp) {\n      try {\n        // If empty\n        if (tmp === undefined || tmp === \"\") {\n          return false;\n        } // If no html, everything ok\n\n\n        if ((tmp.match(/[<>]/g) || []).length <= 0) {\n          return true;\n        } // Checking if html is fine\n\n\n        var jDom = $(tmp);\n        return jDom.length > 0;\n      } catch (ex) {\n        return false;\n      }\n    },\n    _process_options: function _process_options(opts) {\n      // Store raw options for reference\n      this._o = $.extend({}, this._o, opts); // Processed options\n\n      var o = this.o = $.extend({}, this._o); // Check if \"de-DE\" style date is available, if not language should\n      // fallback to 2 letter code eg \"de\"\n\n      var lang = o.language;\n\n      if (!dates[lang]) {\n        lang = lang.split('-')[0];\n        if (!dates[lang]) lang = defaults.language;\n      }\n\n      o.language = lang; // Retrieve view index from any aliases\n\n      o.startView = this._resolveViewName(o.startView);\n      o.minViewMode = this._resolveViewName(o.minViewMode);\n      o.maxViewMode = this._resolveViewName(o.maxViewMode); // Check view is between min and max\n\n      o.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, o.startView)); // true, false, or Number > 0\n\n      if (o.multidate !== true) {\n        o.multidate = Number(o.multidate) || false;\n        if (o.multidate !== false) o.multidate = Math.max(0, o.multidate);\n      }\n\n      o.multidateSeparator = String(o.multidateSeparator);\n      o.weekStart %= 7;\n      o.weekEnd = (o.weekStart + 6) % 7;\n      var format = DPGlobal.parseFormat(o.format);\n\n      if (o.startDate !== -Infinity) {\n        if (!!o.startDate) {\n          if (o.startDate instanceof Date) o.startDate = this._local_to_utc(this._zero_time(o.startDate));else o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);\n        } else {\n          o.startDate = -Infinity;\n        }\n      }\n\n      if (o.endDate !== Infinity) {\n        if (!!o.endDate) {\n          if (o.endDate instanceof Date) o.endDate = this._local_to_utc(this._zero_time(o.endDate));else o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);\n        } else {\n          o.endDate = Infinity;\n        }\n      }\n\n      o.daysOfWeekDisabled = this._resolveDaysOfWeek(o.daysOfWeekDisabled || []);\n      o.daysOfWeekHighlighted = this._resolveDaysOfWeek(o.daysOfWeekHighlighted || []);\n      o.datesDisabled = o.datesDisabled || [];\n\n      if (!$.isArray(o.datesDisabled)) {\n        o.datesDisabled = o.datesDisabled.split(',');\n      }\n\n      o.datesDisabled = $.map(o.datesDisabled, function (d) {\n        return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear);\n      });\n\n      var plc = String(o.orientation).toLowerCase().split(/\\s+/g),\n          _plc = o.orientation.toLowerCase();\n\n      plc = $.grep(plc, function (word) {\n        return /^auto|left|right|top|bottom$/.test(word);\n      });\n      o.orientation = {\n        x: 'auto',\n        y: 'auto'\n      };\n      if (!_plc || _plc === 'auto') ; // no action\n      else if (plc.length === 1) {\n        switch (plc[0]) {\n          case 'top':\n          case 'bottom':\n            o.orientation.y = plc[0];\n            break;\n\n          case 'left':\n          case 'right':\n            o.orientation.x = plc[0];\n            break;\n        }\n      } else {\n        _plc = $.grep(plc, function (word) {\n          return /^left|right$/.test(word);\n        });\n        o.orientation.x = _plc[0] || 'auto';\n        _plc = $.grep(plc, function (word) {\n          return /^top|bottom$/.test(word);\n        });\n        o.orientation.y = _plc[0] || 'auto';\n      }\n\n      if (o.defaultViewDate instanceof Date || typeof o.defaultViewDate === 'string') {\n        o.defaultViewDate = DPGlobal.parseDate(o.defaultViewDate, format, o.language, o.assumeNearbyYear);\n      } else if (o.defaultViewDate) {\n        var year = o.defaultViewDate.year || new Date().getFullYear();\n        var month = o.defaultViewDate.month || 0;\n        var day = o.defaultViewDate.day || 1;\n        o.defaultViewDate = UTCDate(year, month, day);\n      } else {\n        o.defaultViewDate = UTCToday();\n      }\n    },\n    _applyEvents: function _applyEvents(evs) {\n      for (var i = 0, el, ch, ev; i < evs.length; i++) {\n        el = evs[i][0];\n\n        if (evs[i].length === 2) {\n          ch = undefined;\n          ev = evs[i][1];\n        } else if (evs[i].length === 3) {\n          ch = evs[i][1];\n          ev = evs[i][2];\n        }\n\n        el.on(ev, ch);\n      }\n    },\n    _unapplyEvents: function _unapplyEvents(evs) {\n      for (var i = 0, el, ev, ch; i < evs.length; i++) {\n        el = evs[i][0];\n\n        if (evs[i].length === 2) {\n          ch = undefined;\n          ev = evs[i][1];\n        } else if (evs[i].length === 3) {\n          ch = evs[i][1];\n          ev = evs[i][2];\n        }\n\n        el.off(ev, ch);\n      }\n    },\n    _buildEvents: function _buildEvents() {\n      var events = {\n        keyup: $.proxy(function (e) {\n          if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1) this.update();\n        }, this),\n        keydown: $.proxy(this.keydown, this),\n        paste: $.proxy(this.paste, this)\n      };\n\n      if (this.o.showOnFocus === true) {\n        events.focus = $.proxy(this.show, this);\n      }\n\n      if (this.isInput) {\n        // single input\n        this._events = [[this.element, events]];\n      } // component: input + button\n      else if (this.component && this.inputField.length) {\n        this._events = [// For components that are not readonly, allow keyboard nav\n        [this.inputField, events], [this.component, {\n          click: $.proxy(this.show, this)\n        }]];\n      } else {\n        this._events = [[this.element, {\n          click: $.proxy(this.show, this),\n          keydown: $.proxy(this.keydown, this)\n        }]];\n      }\n\n      this._events.push( // Component: listen for blur on element descendants\n      [this.element, '*', {\n        blur: $.proxy(function (e) {\n          this._focused_from = e.target;\n        }, this)\n      }], // Input: listen for blur on element\n      [this.element, {\n        blur: $.proxy(function (e) {\n          this._focused_from = e.target;\n        }, this)\n      }]);\n\n      if (this.o.immediateUpdates) {\n        // Trigger input updates immediately on changed year/month\n        this._events.push([this.element, {\n          'changeYear changeMonth': $.proxy(function (e) {\n            this.update(e.date);\n          }, this)\n        }]);\n      }\n\n      this._secondaryEvents = [[this.picker, {\n        click: $.proxy(this.click, this)\n      }], [this.picker, '.prev, .next', {\n        click: $.proxy(this.navArrowsClick, this)\n      }], [this.picker, '.day:not(.disabled)', {\n        click: $.proxy(this.dayCellClick, this)\n      }], [$(window), {\n        resize: $.proxy(this.place, this)\n      }], [$(document), {\n        'mousedown touchstart': $.proxy(function (e) {\n          // Clicked outside the datepicker, hide it\n          if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.isInline)) {\n            this.hide();\n          }\n        }, this)\n      }]];\n    },\n    _attachEvents: function _attachEvents() {\n      this._detachEvents();\n\n      this._applyEvents(this._events);\n    },\n    _detachEvents: function _detachEvents() {\n      this._unapplyEvents(this._events);\n    },\n    _attachSecondaryEvents: function _attachSecondaryEvents() {\n      this._detachSecondaryEvents();\n\n      this._applyEvents(this._secondaryEvents);\n    },\n    _detachSecondaryEvents: function _detachSecondaryEvents() {\n      this._unapplyEvents(this._secondaryEvents);\n    },\n    _trigger: function _trigger(event, altdate) {\n      var date = altdate || this.dates.get(-1),\n          local_date = this._utc_to_local(date);\n\n      this.element.trigger({\n        type: event,\n        date: local_date,\n        viewMode: this.viewMode,\n        dates: $.map(this.dates, this._utc_to_local),\n        format: $.proxy(function (ix, format) {\n          if (arguments.length === 0) {\n            ix = this.dates.length - 1;\n            format = this.o.format;\n          } else if (typeof ix === 'string') {\n            format = ix;\n            ix = this.dates.length - 1;\n          }\n\n          format = format || this.o.format;\n          var date = this.dates.get(ix);\n          return DPGlobal.formatDate(date, format, this.o.language);\n        }, this)\n      });\n    },\n    show: function show() {\n      if (this.inputField.is(':disabled') || this.inputField.prop('readonly') && this.o.enableOnReadonly === false) return;\n      if (!this.isInline) this.picker.appendTo(this.o.container);\n      this.place();\n      this.picker.show();\n\n      this._attachSecondaryEvents();\n\n      this._trigger('show');\n\n      if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) {\n        $(this.element).blur();\n      }\n\n      return this;\n    },\n    hide: function hide() {\n      if (this.isInline || !this.picker.is(':visible')) return this;\n      this.focusDate = null;\n      this.picker.hide().detach();\n\n      this._detachSecondaryEvents();\n\n      this.setViewMode(this.o.startView);\n      if (this.o.forceParse && this.inputField.val()) this.setValue();\n\n      this._trigger('hide');\n\n      return this;\n    },\n    destroy: function destroy() {\n      this.hide();\n\n      this._detachEvents();\n\n      this._detachSecondaryEvents();\n\n      this.picker.remove();\n      delete this.element.data().datepicker;\n\n      if (!this.isInput) {\n        delete this.element.data().date;\n      }\n\n      return this;\n    },\n    paste: function paste(e) {\n      var dateString;\n\n      if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.types && $.inArray('text/plain', e.originalEvent.clipboardData.types) !== -1) {\n        dateString = e.originalEvent.clipboardData.getData('text/plain');\n      } else if (window.clipboardData) {\n        dateString = window.clipboardData.getData('Text');\n      } else {\n        return;\n      }\n\n      this.setDate(dateString);\n      this.update();\n      e.preventDefault();\n    },\n    _utc_to_local: function _utc_to_local(utc) {\n      if (!utc) {\n        return utc;\n      }\n\n      var local = new Date(utc.getTime() + utc.getTimezoneOffset() * 60000);\n\n      if (local.getTimezoneOffset() !== utc.getTimezoneOffset()) {\n        local = new Date(utc.getTime() + local.getTimezoneOffset() * 60000);\n      }\n\n      return local;\n    },\n    _local_to_utc: function _local_to_utc(local) {\n      return local && new Date(local.getTime() - local.getTimezoneOffset() * 60000);\n    },\n    _zero_time: function _zero_time(local) {\n      return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());\n    },\n    _zero_utc_time: function _zero_utc_time(utc) {\n      return utc && UTCDate(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate());\n    },\n    getDates: function getDates() {\n      return $.map(this.dates, this._utc_to_local);\n    },\n    getUTCDates: function getUTCDates() {\n      return $.map(this.dates, function (d) {\n        return new Date(d);\n      });\n    },\n    getDate: function getDate() {\n      return this._utc_to_local(this.getUTCDate());\n    },\n    getUTCDate: function getUTCDate() {\n      var selected_date = this.dates.get(-1);\n\n      if (selected_date !== undefined) {\n        return new Date(selected_date);\n      } else {\n        return null;\n      }\n    },\n    clearDates: function clearDates() {\n      this.inputField.val('');\n      this.update();\n\n      this._trigger('changeDate');\n\n      if (this.o.autoclose) {\n        this.hide();\n      }\n    },\n    setDates: function setDates() {\n      var args = $.isArray(arguments[0]) ? arguments[0] : arguments;\n      this.update.apply(this, args);\n\n      this._trigger('changeDate');\n\n      this.setValue();\n      return this;\n    },\n    setUTCDates: function setUTCDates() {\n      var args = $.isArray(arguments[0]) ? arguments[0] : arguments;\n      this.setDates.apply(this, $.map(args, this._utc_to_local));\n      return this;\n    },\n    setDate: alias('setDates'),\n    setUTCDate: alias('setUTCDates'),\n    remove: alias('destroy', 'Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead'),\n    setValue: function setValue() {\n      var formatted = this.getFormattedDate();\n      this.inputField.val(formatted);\n      return this;\n    },\n    getFormattedDate: function getFormattedDate(format) {\n      if (format === undefined) format = this.o.format;\n      var lang = this.o.language;\n      return $.map(this.dates, function (d) {\n        return DPGlobal.formatDate(d, format, lang);\n      }).join(this.o.multidateSeparator);\n    },\n    getStartDate: function getStartDate() {\n      return this.o.startDate;\n    },\n    setStartDate: function setStartDate(startDate) {\n      this._process_options({\n        startDate: startDate\n      });\n\n      this.update();\n      this.updateNavArrows();\n      return this;\n    },\n    getEndDate: function getEndDate() {\n      return this.o.endDate;\n    },\n    setEndDate: function setEndDate(endDate) {\n      this._process_options({\n        endDate: endDate\n      });\n\n      this.update();\n      this.updateNavArrows();\n      return this;\n    },\n    setDaysOfWeekDisabled: function setDaysOfWeekDisabled(daysOfWeekDisabled) {\n      this._process_options({\n        daysOfWeekDisabled: daysOfWeekDisabled\n      });\n\n      this.update();\n      return this;\n    },\n    setDaysOfWeekHighlighted: function setDaysOfWeekHighlighted(daysOfWeekHighlighted) {\n      this._process_options({\n        daysOfWeekHighlighted: daysOfWeekHighlighted\n      });\n\n      this.update();\n      return this;\n    },\n    setDatesDisabled: function setDatesDisabled(datesDisabled) {\n      this._process_options({\n        datesDisabled: datesDisabled\n      });\n\n      this.update();\n      return this;\n    },\n    place: function place() {\n      if (this.isInline) return this;\n      var calendarWidth = this.picker.outerWidth(),\n          calendarHeight = this.picker.outerHeight(),\n          visualPadding = 10,\n          container = $(this.o.container),\n          windowWidth = container.width(),\n          scrollTop = this.o.container === 'body' ? $(document).scrollTop() : container.scrollTop(),\n          appendOffset = container.offset();\n      var parentsZindex = [0];\n      this.element.parents().each(function () {\n        var itemZIndex = $(this).css('z-index');\n        if (itemZIndex !== 'auto' && Number(itemZIndex) !== 0) parentsZindex.push(Number(itemZIndex));\n      });\n      var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;\n      var offset = this.component ? this.component.parent().offset() : this.element.offset();\n      var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);\n      var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);\n      var left = offset.left - appendOffset.left;\n      var top = offset.top - appendOffset.top;\n\n      if (this.o.container !== 'body') {\n        top += scrollTop;\n      }\n\n      this.picker.removeClass('datepicker-orient-top datepicker-orient-bottom ' + 'datepicker-orient-right datepicker-orient-left');\n\n      if (this.o.orientation.x !== 'auto') {\n        this.picker.addClass('datepicker-orient-' + this.o.orientation.x);\n        if (this.o.orientation.x === 'right') left -= calendarWidth - width;\n      } // auto x orientation is best-placement: if it crosses a window\n      // edge, fudge it sideways\n      else {\n        if (offset.left < 0) {\n          // component is outside the window on the left side. Move it into visible range\n          this.picker.addClass('datepicker-orient-left');\n          left -= offset.left - visualPadding;\n        } else if (left + calendarWidth > windowWidth) {\n          // the calendar passes the widow right edge. Align it to component right side\n          this.picker.addClass('datepicker-orient-right');\n          left += width - calendarWidth;\n        } else {\n          if (this.o.rtl) {\n            // Default to right\n            this.picker.addClass('datepicker-orient-right');\n          } else {\n            // Default to left\n            this.picker.addClass('datepicker-orient-left');\n          }\n        }\n      } // auto y orientation is best-situation: top or bottom, no fudging,\n      // decision based on which shows more of the calendar\n\n\n      var yorient = this.o.orientation.y,\n          top_overflow;\n\n      if (yorient === 'auto') {\n        top_overflow = -scrollTop + top - calendarHeight;\n        yorient = top_overflow < 0 ? 'bottom' : 'top';\n      }\n\n      this.picker.addClass('datepicker-orient-' + yorient);\n      if (yorient === 'top') top -= calendarHeight + parseInt(this.picker.css('padding-top'));else top += height;\n\n      if (this.o.rtl) {\n        var right = windowWidth - (left + width);\n        this.picker.css({\n          top: top,\n          right: right,\n          zIndex: zIndex\n        });\n      } else {\n        this.picker.css({\n          top: top,\n          left: left,\n          zIndex: zIndex\n        });\n      }\n\n      return this;\n    },\n    _allow_update: true,\n    update: function update() {\n      if (!this._allow_update) return this;\n      var oldDates = this.dates.copy(),\n          dates = [],\n          fromArgs = false;\n\n      if (arguments.length) {\n        $.each(arguments, $.proxy(function (i, date) {\n          if (date instanceof Date) date = this._local_to_utc(date);\n          dates.push(date);\n        }, this));\n        fromArgs = true;\n      } else {\n        dates = this.isInput ? this.element.val() : this.element.data('date') || this.inputField.val();\n        if (dates && this.o.multidate) dates = dates.split(this.o.multidateSeparator);else dates = [dates];\n        delete this.element.data().date;\n      }\n\n      dates = $.map(dates, $.proxy(function (date) {\n        return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);\n      }, this));\n      dates = $.grep(dates, $.proxy(function (date) {\n        return !this.dateWithinRange(date) || !date;\n      }, this), true);\n      this.dates.replace(dates);\n\n      if (this.o.updateViewDate) {\n        if (this.dates.length) this.viewDate = new Date(this.dates.get(-1));else if (this.viewDate < this.o.startDate) this.viewDate = new Date(this.o.startDate);else if (this.viewDate > this.o.endDate) this.viewDate = new Date(this.o.endDate);else this.viewDate = this.o.defaultViewDate;\n      }\n\n      if (fromArgs) {\n        // setting date by clicking\n        this.setValue();\n        this.element.change();\n      } else if (this.dates.length) {\n        // setting date by typing\n        if (String(oldDates) !== String(this.dates) && fromArgs) {\n          this._trigger('changeDate');\n\n          this.element.change();\n        }\n      }\n\n      if (!this.dates.length && oldDates.length) {\n        this._trigger('clearDate');\n\n        this.element.change();\n      }\n\n      this.fill();\n      return this;\n    },\n    fillDow: function fillDow() {\n      if (this.o.showWeekDays) {\n        var dowCnt = this.o.weekStart,\n            html = '<tr>';\n\n        if (this.o.calendarWeeks) {\n          html += '<th class=\"cw\">&#160;</th>';\n        }\n\n        while (dowCnt < this.o.weekStart + 7) {\n          html += '<th class=\"dow';\n          if ($.inArray(dowCnt, this.o.daysOfWeekDisabled) !== -1) html += ' disabled';\n          html += '\">' + dates[this.o.language].daysMin[dowCnt++ % 7] + '</th>';\n        }\n\n        html += '</tr>';\n        this.picker.find('.datepicker-days thead').append(html);\n      }\n    },\n    fillMonths: function fillMonths() {\n      var localDate = this._utc_to_local(this.viewDate);\n\n      var html = '';\n      var focused;\n\n      for (var i = 0; i < 12; i++) {\n        focused = localDate && localDate.getMonth() === i ? ' focused' : '';\n        html += '<span class=\"month' + focused + '\">' + dates[this.o.language].monthsShort[i] + '</span>';\n      }\n\n      this.picker.find('.datepicker-months td').html(html);\n    },\n    setRange: function setRange(range) {\n      if (!range || !range.length) delete this.range;else this.range = $.map(range, function (d) {\n        return d.valueOf();\n      });\n      this.fill();\n    },\n    getClassNames: function getClassNames(date) {\n      var cls = [],\n          year = this.viewDate.getUTCFullYear(),\n          month = this.viewDate.getUTCMonth(),\n          today = UTCToday();\n\n      if (date.getUTCFullYear() < year || date.getUTCFullYear() === year && date.getUTCMonth() < month) {\n        cls.push('old');\n      } else if (date.getUTCFullYear() > year || date.getUTCFullYear() === year && date.getUTCMonth() > month) {\n        cls.push('new');\n      }\n\n      if (this.focusDate && date.valueOf() === this.focusDate.valueOf()) cls.push('focused'); // Compare internal UTC date with UTC today, not local today\n\n      if (this.o.todayHighlight && isUTCEquals(date, today)) {\n        cls.push('today');\n      }\n\n      if (this.dates.contains(date) !== -1) cls.push('active');\n\n      if (!this.dateWithinRange(date)) {\n        cls.push('disabled');\n      }\n\n      if (this.dateIsDisabled(date)) {\n        cls.push('disabled', 'disabled-date');\n      }\n\n      if ($.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1) {\n        cls.push('highlighted');\n      }\n\n      if (this.range) {\n        if (date > this.range[0] && date < this.range[this.range.length - 1]) {\n          cls.push('range');\n        }\n\n        if ($.inArray(date.valueOf(), this.range) !== -1) {\n          cls.push('selected');\n        }\n\n        if (date.valueOf() === this.range[0]) {\n          cls.push('range-start');\n        }\n\n        if (date.valueOf() === this.range[this.range.length - 1]) {\n          cls.push('range-end');\n        }\n      }\n\n      return cls;\n    },\n    _fill_yearsView: function _fill_yearsView(selector, cssClass, factor, year, startYear, endYear, beforeFn) {\n      var html = '';\n      var step = factor / 10;\n      var view = this.picker.find(selector);\n      var startVal = Math.floor(year / factor) * factor;\n      var endVal = startVal + step * 9;\n      var focusedVal = Math.floor(this.viewDate.getFullYear() / step) * step;\n      var selected = $.map(this.dates, function (d) {\n        return Math.floor(d.getUTCFullYear() / step) * step;\n      });\n      var classes, tooltip, before;\n\n      for (var currVal = startVal - step; currVal <= endVal + step; currVal += step) {\n        classes = [cssClass];\n        tooltip = null;\n\n        if (currVal === startVal - step) {\n          classes.push('old');\n        } else if (currVal === endVal + step) {\n          classes.push('new');\n        }\n\n        if ($.inArray(currVal, selected) !== -1) {\n          classes.push('active');\n        }\n\n        if (currVal < startYear || currVal > endYear) {\n          classes.push('disabled');\n        }\n\n        if (currVal === focusedVal) {\n          classes.push('focused');\n        }\n\n        if (beforeFn !== $.noop) {\n          before = beforeFn(new Date(currVal, 0, 1));\n\n          if (before === undefined) {\n            before = {};\n          } else if (typeof before === 'boolean') {\n            before = {\n              enabled: before\n            };\n          } else if (typeof before === 'string') {\n            before = {\n              classes: before\n            };\n          }\n\n          if (before.enabled === false) {\n            classes.push('disabled');\n          }\n\n          if (before.classes) {\n            classes = classes.concat(before.classes.split(/\\s+/));\n          }\n\n          if (before.tooltip) {\n            tooltip = before.tooltip;\n          }\n        }\n\n        html += '<span class=\"' + classes.join(' ') + '\"' + (tooltip ? ' title=\"' + tooltip + '\"' : '') + '>' + currVal + '</span>';\n      }\n\n      view.find('.datepicker-switch').text(startVal + '-' + endVal);\n      view.find('td').html(html);\n    },\n    fill: function fill() {\n      var d = new Date(this.viewDate),\n          year = d.getUTCFullYear(),\n          month = d.getUTCMonth(),\n          startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,\n          startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,\n          endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,\n          endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,\n          todaytxt = dates[this.o.language].today || dates['en'].today || '',\n          cleartxt = dates[this.o.language].clear || dates['en'].clear || '',\n          titleFormat = dates[this.o.language].titleFormat || dates['en'].titleFormat,\n          todayDate = UTCToday(),\n          titleBtnVisible = (this.o.todayBtn === true || this.o.todayBtn === 'linked') && todayDate >= this.o.startDate && todayDate <= this.o.endDate && !this.weekOfDateIsDisabled(todayDate),\n          tooltip,\n          before;\n      if (isNaN(year) || isNaN(month)) return;\n      this.picker.find('.datepicker-days .datepicker-switch').text(DPGlobal.formatDate(d, titleFormat, this.o.language));\n      this.picker.find('tfoot .today').text(todaytxt).css('display', titleBtnVisible ? 'table-cell' : 'none');\n      this.picker.find('tfoot .clear').text(cleartxt).css('display', this.o.clearBtn === true ? 'table-cell' : 'none');\n      this.picker.find('thead .datepicker-title').text(this.o.title).css('display', typeof this.o.title === 'string' && this.o.title !== '' ? 'table-cell' : 'none');\n      this.updateNavArrows();\n      this.fillMonths();\n      var prevMonth = UTCDate(year, month, 0),\n          day = prevMonth.getUTCDate();\n      prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);\n      var nextMonth = new Date(prevMonth);\n\n      if (prevMonth.getUTCFullYear() < 100) {\n        nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());\n      }\n\n      nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\n      nextMonth = nextMonth.valueOf();\n      var html = [];\n      var weekDay, clsName;\n\n      while (prevMonth.valueOf() < nextMonth) {\n        weekDay = prevMonth.getUTCDay();\n\n        if (weekDay === this.o.weekStart) {\n          html.push('<tr>');\n\n          if (this.o.calendarWeeks) {\n            // ISO 8601: First week contains first thursday.\n            // ISO also states week starts on Monday, but we can be more abstract here.\n            var // Start of current week: based on weekstart/current date\n            ws = new Date(+prevMonth + (this.o.weekStart - weekDay - 7) % 7 * 864e5),\n                // Thursday of this week\n            th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),\n                // First Thursday of year, year from thursday\n            yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5),\n                // Calendar week: ms between thursdays, div ms per day, div 7 days\n            calWeek = (th - yth) / 864e5 / 7 + 1;\n            html.push('<td class=\"cw\">' + calWeek + '</td>');\n          }\n        }\n\n        clsName = this.getClassNames(prevMonth);\n        clsName.push('day');\n        var content = prevMonth.getUTCDate();\n\n        if (this.o.beforeShowDay !== $.noop) {\n          before = this.o.beforeShowDay(this._utc_to_local(prevMonth));\n          if (before === undefined) before = {};else if (typeof before === 'boolean') before = {\n            enabled: before\n          };else if (typeof before === 'string') before = {\n            classes: before\n          };\n          if (before.enabled === false) clsName.push('disabled');\n          if (before.classes) clsName = clsName.concat(before.classes.split(/\\s+/));\n          if (before.tooltip) tooltip = before.tooltip;\n          if (before.content) content = before.content;\n        } //Check if uniqueSort exists (supported by jquery >=1.12 and >=2.2)\n        //Fallback to unique function for older jquery versions\n\n\n        if ($.isFunction($.uniqueSort)) {\n          clsName = $.uniqueSort(clsName);\n        } else {\n          clsName = $.unique(clsName);\n        }\n\n        html.push('<td class=\"' + clsName.join(' ') + '\"' + (tooltip ? ' title=\"' + tooltip + '\"' : '') + ' data-date=\"' + prevMonth.getTime().toString() + '\">' + content + '</td>');\n        tooltip = null;\n\n        if (weekDay === this.o.weekEnd) {\n          html.push('</tr>');\n        }\n\n        prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);\n      }\n\n      this.picker.find('.datepicker-days tbody').html(html.join(''));\n      var monthsTitle = dates[this.o.language].monthsTitle || dates['en'].monthsTitle || 'Months';\n      var months = this.picker.find('.datepicker-months').find('.datepicker-switch').text(this.o.maxViewMode < 2 ? monthsTitle : year).end().find('tbody span').removeClass('active');\n      $.each(this.dates, function (i, d) {\n        if (d.getUTCFullYear() === year) months.eq(d.getUTCMonth()).addClass('active');\n      });\n\n      if (year < startYear || year > endYear) {\n        months.addClass('disabled');\n      }\n\n      if (year === startYear) {\n        months.slice(0, startMonth).addClass('disabled');\n      }\n\n      if (year === endYear) {\n        months.slice(endMonth + 1).addClass('disabled');\n      }\n\n      if (this.o.beforeShowMonth !== $.noop) {\n        var that = this;\n        $.each(months, function (i, month) {\n          var moDate = new Date(year, i, 1);\n          var before = that.o.beforeShowMonth(moDate);\n          if (before === undefined) before = {};else if (typeof before === 'boolean') before = {\n            enabled: before\n          };else if (typeof before === 'string') before = {\n            classes: before\n          };\n          if (before.enabled === false && !$(month).hasClass('disabled')) $(month).addClass('disabled');\n          if (before.classes) $(month).addClass(before.classes);\n          if (before.tooltip) $(month).prop('title', before.tooltip);\n        });\n      } // Generating decade/years picker\n\n\n      this._fill_yearsView('.datepicker-years', 'year', 10, year, startYear, endYear, this.o.beforeShowYear); // Generating century/decades picker\n\n\n      this._fill_yearsView('.datepicker-decades', 'decade', 100, year, startYear, endYear, this.o.beforeShowDecade); // Generating millennium/centuries picker\n\n\n      this._fill_yearsView('.datepicker-centuries', 'century', 1000, year, startYear, endYear, this.o.beforeShowCentury);\n    },\n    updateNavArrows: function updateNavArrows() {\n      if (!this._allow_update) return;\n      var d = new Date(this.viewDate),\n          year = d.getUTCFullYear(),\n          month = d.getUTCMonth(),\n          startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,\n          startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,\n          endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,\n          endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,\n          prevIsDisabled,\n          nextIsDisabled,\n          factor = 1;\n\n      switch (this.viewMode) {\n        case 4:\n          factor *= 10;\n\n        /* falls through */\n\n        case 3:\n          factor *= 10;\n\n        /* falls through */\n\n        case 2:\n          factor *= 10;\n\n        /* falls through */\n\n        case 1:\n          prevIsDisabled = Math.floor(year / factor) * factor <= startYear;\n          nextIsDisabled = Math.floor(year / factor) * factor + factor > endYear;\n          break;\n\n        case 0:\n          prevIsDisabled = year <= startYear && month <= startMonth;\n          nextIsDisabled = year >= endYear && month >= endMonth;\n          break;\n      }\n\n      this.picker.find('.prev').toggleClass('disabled', prevIsDisabled);\n      this.picker.find('.next').toggleClass('disabled', nextIsDisabled);\n    },\n    click: function click(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var target, dir, day, year, month;\n      target = $(e.target); // Clicked on the switch\n\n      if (target.hasClass('datepicker-switch') && this.viewMode !== this.o.maxViewMode) {\n        this.setViewMode(this.viewMode + 1);\n      } // Clicked on today button\n\n\n      if (target.hasClass('today') && !target.hasClass('day')) {\n        this.setViewMode(0);\n\n        this._setDate(UTCToday(), this.o.todayBtn === 'linked' ? null : 'view');\n      } // Clicked on clear button\n\n\n      if (target.hasClass('clear')) {\n        this.clearDates();\n      }\n\n      if (!target.hasClass('disabled')) {\n        // Clicked on a month, year, decade, century\n        if (target.hasClass('month') || target.hasClass('year') || target.hasClass('decade') || target.hasClass('century')) {\n          this.viewDate.setUTCDate(1);\n          day = 1;\n\n          if (this.viewMode === 1) {\n            month = target.parent().find('span').index(target);\n            year = this.viewDate.getUTCFullYear();\n            this.viewDate.setUTCMonth(month);\n          } else {\n            month = 0;\n            year = Number(target.text());\n            this.viewDate.setUTCFullYear(year);\n          }\n\n          this._trigger(DPGlobal.viewModes[this.viewMode - 1].e, this.viewDate);\n\n          if (this.viewMode === this.o.minViewMode) {\n            this._setDate(UTCDate(year, month, day));\n          } else {\n            this.setViewMode(this.viewMode - 1);\n            this.fill();\n          }\n        }\n      }\n\n      if (this.picker.is(':visible') && this._focused_from) {\n        this._focused_from.focus();\n      }\n\n      delete this._focused_from;\n    },\n    dayCellClick: function dayCellClick(e) {\n      var $target = $(e.currentTarget);\n      var timestamp = $target.data('date');\n      var date = new Date(timestamp);\n\n      if (this.o.updateViewDate) {\n        if (date.getUTCFullYear() !== this.viewDate.getUTCFullYear()) {\n          this._trigger('changeYear', this.viewDate);\n        }\n\n        if (date.getUTCMonth() !== this.viewDate.getUTCMonth()) {\n          this._trigger('changeMonth', this.viewDate);\n        }\n      }\n\n      this._setDate(date);\n    },\n    // Clicked on prev or next\n    navArrowsClick: function navArrowsClick(e) {\n      var $target = $(e.currentTarget);\n      var dir = $target.hasClass('prev') ? -1 : 1;\n\n      if (this.viewMode !== 0) {\n        dir *= DPGlobal.viewModes[this.viewMode].navStep * 12;\n      }\n\n      this.viewDate = this.moveMonth(this.viewDate, dir);\n\n      this._trigger(DPGlobal.viewModes[this.viewMode].e, this.viewDate);\n\n      this.fill();\n    },\n    _toggle_multidate: function _toggle_multidate(date) {\n      var ix = this.dates.contains(date);\n\n      if (!date) {\n        this.dates.clear();\n      }\n\n      if (ix !== -1) {\n        if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive) {\n          this.dates.remove(ix);\n        }\n      } else if (this.o.multidate === false) {\n        this.dates.clear();\n        this.dates.push(date);\n      } else {\n        this.dates.push(date);\n      }\n\n      if (typeof this.o.multidate === 'number') while (this.dates.length > this.o.multidate) {\n        this.dates.remove(0);\n      }\n    },\n    _setDate: function _setDate(date, which) {\n      if (!which || which === 'date') this._toggle_multidate(date && new Date(date));\n      if (!which && this.o.updateViewDate || which === 'view') this.viewDate = date && new Date(date);\n      this.fill();\n      this.setValue();\n\n      if (!which || which !== 'view') {\n        this._trigger('changeDate');\n      }\n\n      this.inputField.trigger('change');\n\n      if (this.o.autoclose && (!which || which === 'date')) {\n        this.hide();\n      }\n    },\n    moveDay: function moveDay(date, dir) {\n      var newDate = new Date(date);\n      newDate.setUTCDate(date.getUTCDate() + dir);\n      return newDate;\n    },\n    moveWeek: function moveWeek(date, dir) {\n      return this.moveDay(date, dir * 7);\n    },\n    moveMonth: function moveMonth(date, dir) {\n      if (!isValidDate(date)) return this.o.defaultViewDate;\n      if (!dir) return date;\n      var new_date = new Date(date.valueOf()),\n          day = new_date.getUTCDate(),\n          month = new_date.getUTCMonth(),\n          mag = Math.abs(dir),\n          new_month,\n          test;\n      dir = dir > 0 ? 1 : -1;\n\n      if (mag === 1) {\n        test = dir === -1 // If going back one month, make sure month is not current month\n        // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\n        ? function () {\n          return new_date.getUTCMonth() === month;\n        } // If going forward one month, make sure month is as expected\n        // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\n        : function () {\n          return new_date.getUTCMonth() !== new_month;\n        };\n        new_month = month + dir;\n        new_date.setUTCMonth(new_month); // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\n\n        new_month = (new_month + 12) % 12;\n      } else {\n        // For magnitudes >1, move one month at a time...\n        for (var i = 0; i < mag; i++) {\n          // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\n          new_date = this.moveMonth(new_date, dir);\n        } // ...then reset the day, keeping it in the new month\n\n\n        new_month = new_date.getUTCMonth();\n        new_date.setUTCDate(day);\n\n        test = function test() {\n          return new_month !== new_date.getUTCMonth();\n        };\n      } // Common date-resetting loop -- if date is beyond end of month, make it\n      // end of month\n\n\n      while (test()) {\n        new_date.setUTCDate(--day);\n        new_date.setUTCMonth(new_month);\n      }\n\n      return new_date;\n    },\n    moveYear: function moveYear(date, dir) {\n      return this.moveMonth(date, dir * 12);\n    },\n    moveAvailableDate: function moveAvailableDate(date, dir, fn) {\n      do {\n        date = this[fn](date, dir);\n        if (!this.dateWithinRange(date)) return false;\n        fn = 'moveDay';\n      } while (this.dateIsDisabled(date));\n\n      return date;\n    },\n    weekOfDateIsDisabled: function weekOfDateIsDisabled(date) {\n      return $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;\n    },\n    dateIsDisabled: function dateIsDisabled(date) {\n      return this.weekOfDateIsDisabled(date) || $.grep(this.o.datesDisabled, function (d) {\n        return isUTCEquals(date, d);\n      }).length > 0;\n    },\n    dateWithinRange: function dateWithinRange(date) {\n      return date >= this.o.startDate && date <= this.o.endDate;\n    },\n    keydown: function keydown(e) {\n      if (!this.picker.is(':visible')) {\n        if (e.keyCode === 40 || e.keyCode === 27) {\n          // allow down to re-show picker\n          this.show();\n          e.stopPropagation();\n        }\n\n        return;\n      }\n\n      var dateChanged = false,\n          dir,\n          newViewDate,\n          focusDate = this.focusDate || this.viewDate;\n\n      switch (e.keyCode) {\n        case 27:\n          // escape\n          if (this.focusDate) {\n            this.focusDate = null;\n            this.viewDate = this.dates.get(-1) || this.viewDate;\n            this.fill();\n          } else this.hide();\n\n          e.preventDefault();\n          e.stopPropagation();\n          break;\n\n        case 37: // left\n\n        case 38: // up\n\n        case 39: // right\n\n        case 40:\n          // down\n          if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7) break;\n          dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;\n\n          if (this.viewMode === 0) {\n            if (e.ctrlKey) {\n              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');\n              if (newViewDate) this._trigger('changeYear', this.viewDate);\n            } else if (e.shiftKey) {\n              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');\n              if (newViewDate) this._trigger('changeMonth', this.viewDate);\n            } else if (e.keyCode === 37 || e.keyCode === 39) {\n              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveDay');\n            } else if (!this.weekOfDateIsDisabled(focusDate)) {\n              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveWeek');\n            }\n          } else if (this.viewMode === 1) {\n            if (e.keyCode === 38 || e.keyCode === 40) {\n              dir = dir * 4;\n            }\n\n            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');\n          } else if (this.viewMode === 2) {\n            if (e.keyCode === 38 || e.keyCode === 40) {\n              dir = dir * 4;\n            }\n\n            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');\n          }\n\n          if (newViewDate) {\n            this.focusDate = this.viewDate = newViewDate;\n            this.setValue();\n            this.fill();\n            e.preventDefault();\n          }\n\n          break;\n\n        case 13:\n          // enter\n          if (!this.o.forceParse) break;\n          focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;\n\n          if (this.o.keyboardNavigation) {\n            this._toggle_multidate(focusDate);\n\n            dateChanged = true;\n          }\n\n          this.focusDate = null;\n          this.viewDate = this.dates.get(-1) || this.viewDate;\n          this.setValue();\n          this.fill();\n\n          if (this.picker.is(':visible')) {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this.o.autoclose) this.hide();\n          }\n\n          break;\n\n        case 9:\n          // tab\n          this.focusDate = null;\n          this.viewDate = this.dates.get(-1) || this.viewDate;\n          this.fill();\n          this.hide();\n          break;\n      }\n\n      if (dateChanged) {\n        if (this.dates.length) this._trigger('changeDate');else this._trigger('clearDate');\n        this.inputField.trigger('change');\n      }\n    },\n    setViewMode: function setViewMode(viewMode) {\n      this.viewMode = viewMode;\n      this.picker.children('div').hide().filter('.datepicker-' + DPGlobal.viewModes[this.viewMode].clsName).show();\n      this.updateNavArrows();\n\n      this._trigger('changeViewMode', new Date(this.viewDate));\n    }\n  };\n\n  var DateRangePicker = function DateRangePicker(element, options) {\n    $.data(element, 'datepicker', this);\n    this.element = $(element);\n    this.inputs = $.map(options.inputs, function (i) {\n      return i.jquery ? i[0] : i;\n    });\n    delete options.inputs;\n    this.keepEmptyValues = options.keepEmptyValues;\n    delete options.keepEmptyValues;\n    datepickerPlugin.call($(this.inputs), options).on('changeDate', $.proxy(this.dateUpdated, this));\n    this.pickers = $.map(this.inputs, function (i) {\n      return $.data(i, 'datepicker');\n    });\n    this.updateDates();\n  };\n\n  DateRangePicker.prototype = {\n    updateDates: function updateDates() {\n      this.dates = $.map(this.pickers, function (i) {\n        return i.getUTCDate();\n      });\n      this.updateRanges();\n    },\n    updateRanges: function updateRanges() {\n      var range = $.map(this.dates, function (d) {\n        return d.valueOf();\n      });\n      $.each(this.pickers, function (i, p) {\n        p.setRange(range);\n      });\n    },\n    clearDates: function clearDates() {\n      $.each(this.pickers, function (i, p) {\n        p.clearDates();\n      });\n    },\n    dateUpdated: function dateUpdated(e) {\n      // `this.updating` is a workaround for preventing infinite recursion\n      // between `changeDate` triggering and `setUTCDate` calling.  Until\n      // there is a better mechanism.\n      if (this.updating) return;\n      this.updating = true;\n      var dp = $.data(e.target, 'datepicker');\n\n      if (dp === undefined) {\n        return;\n      }\n\n      var new_date = dp.getUTCDate(),\n          keep_empty_values = this.keepEmptyValues,\n          i = $.inArray(e.target, this.inputs),\n          j = i - 1,\n          k = i + 1,\n          l = this.inputs.length;\n      if (i === -1) return;\n      $.each(this.pickers, function (i, p) {\n        if (!p.getUTCDate() && (p === dp || !keep_empty_values)) p.setUTCDate(new_date);\n      });\n\n      if (new_date < this.dates[j]) {\n        // Date being moved earlier/left\n        while (j >= 0 && new_date < this.dates[j]) {\n          this.pickers[j--].setUTCDate(new_date);\n        }\n      } else if (new_date > this.dates[k]) {\n        // Date being moved later/right\n        while (k < l && new_date > this.dates[k]) {\n          this.pickers[k++].setUTCDate(new_date);\n        }\n      }\n\n      this.updateDates();\n      delete this.updating;\n    },\n    destroy: function destroy() {\n      $.map(this.pickers, function (p) {\n        p.destroy();\n      });\n      $(this.inputs).off('changeDate', this.dateUpdated);\n      delete this.element.data().datepicker;\n    },\n    remove: alias('destroy', 'Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead')\n  };\n\n  function opts_from_el(el, prefix) {\n    // Derive options from element data-attrs\n    var data = $(el).data(),\n        out = {},\n        inkey,\n        replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');\n    prefix = new RegExp('^' + prefix.toLowerCase());\n\n    function re_lower(_, a) {\n      return a.toLowerCase();\n    }\n\n    for (var key in data) {\n      if (prefix.test(key)) {\n        inkey = key.replace(replace, re_lower);\n        out[inkey] = data[key];\n      }\n    }\n\n    return out;\n  }\n\n  function opts_from_locale(lang) {\n    // Derive options from locale plugins\n    var out = {}; // Check if \"de-DE\" style date is available, if not language should\n    // fallback to 2 letter code eg \"de\"\n\n    if (!dates[lang]) {\n      lang = lang.split('-')[0];\n      if (!dates[lang]) return;\n    }\n\n    var d = dates[lang];\n    $.each(locale_opts, function (i, k) {\n      if (k in d) out[k] = d[k];\n    });\n    return out;\n  }\n\n  var old = $.fn.datepicker;\n\n  var datepickerPlugin = function datepickerPlugin(option) {\n    var args = Array.apply(null, arguments);\n    args.shift();\n    var internal_return;\n    this.each(function () {\n      var $this = $(this),\n          data = $this.data('datepicker'),\n          options = _typeof(option) === 'object' && option;\n\n      if (!data) {\n        var elopts = opts_from_el(this, 'date'),\n            // Preliminary otions\n        xopts = $.extend({}, defaults, elopts, options),\n            locopts = opts_from_locale(xopts.language),\n            // Options priority: js args, data-attrs, locales, defaults\n        opts = $.extend({}, defaults, locopts, elopts, options);\n\n        if ($this.hasClass('input-daterange') || opts.inputs) {\n          $.extend(opts, {\n            inputs: opts.inputs || $this.find('input').toArray()\n          });\n          data = new DateRangePicker(this, opts);\n        } else {\n          data = new Datepicker(this, opts);\n        }\n\n        $this.data('datepicker', data);\n      }\n\n      if (typeof option === 'string' && typeof data[option] === 'function') {\n        internal_return = data[option].apply(data, args);\n      }\n    });\n    if (internal_return === undefined || internal_return instanceof Datepicker || internal_return instanceof DateRangePicker) return this;\n    if (this.length > 1) throw new Error('Using only allowed for the collection of a single element (' + option + ' function)');else return internal_return;\n  };\n\n  $.fn.datepicker = datepickerPlugin;\n  var defaults = $.fn.datepicker.defaults = {\n    assumeNearbyYear: false,\n    autoclose: false,\n    beforeShowDay: $.noop,\n    beforeShowMonth: $.noop,\n    beforeShowYear: $.noop,\n    beforeShowDecade: $.noop,\n    beforeShowCentury: $.noop,\n    calendarWeeks: false,\n    clearBtn: false,\n    toggleActive: false,\n    daysOfWeekDisabled: [],\n    daysOfWeekHighlighted: [],\n    datesDisabled: [],\n    endDate: Infinity,\n    forceParse: true,\n    format: 'mm/dd/yyyy',\n    keepEmptyValues: false,\n    keyboardNavigation: true,\n    language: 'en',\n    minViewMode: 0,\n    maxViewMode: 4,\n    multidate: false,\n    multidateSeparator: ',',\n    orientation: \"auto\",\n    rtl: false,\n    startDate: -Infinity,\n    startView: 0,\n    todayBtn: false,\n    todayHighlight: false,\n    updateViewDate: true,\n    weekStart: 0,\n    disableTouchKeyboard: false,\n    enableOnReadonly: true,\n    showOnFocus: true,\n    zIndexOffset: 10,\n    container: 'body',\n    immediateUpdates: false,\n    title: '',\n    templates: {\n      leftArrow: '&#x00AB;',\n      rightArrow: '&#x00BB;'\n    },\n    showWeekDays: true\n  };\n  var locale_opts = $.fn.datepicker.locale_opts = ['format', 'rtl', 'weekStart'];\n  $.fn.datepicker.Constructor = Datepicker;\n  var dates = $.fn.datepicker.dates = {\n    en: {\n      days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n      months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      today: \"Today\",\n      clear: \"Clear\",\n      titleFormat: \"MM yyyy\"\n    }\n  };\n  var DPGlobal = {\n    viewModes: [{\n      names: ['days', 'month'],\n      clsName: 'days',\n      e: 'changeMonth'\n    }, {\n      names: ['months', 'year'],\n      clsName: 'months',\n      e: 'changeYear',\n      navStep: 1\n    }, {\n      names: ['years', 'decade'],\n      clsName: 'years',\n      e: 'changeDecade',\n      navStep: 10\n    }, {\n      names: ['decades', 'century'],\n      clsName: 'decades',\n      e: 'changeCentury',\n      navStep: 100\n    }, {\n      names: ['centuries', 'millennium'],\n      clsName: 'centuries',\n      e: 'changeMillennium',\n      navStep: 1000\n    }],\n    validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\n    nonpunctuation: /[^ -\\/:-@\\u5e74\\u6708\\u65e5\\[-`{-~\\t\\n\\r]+/g,\n    parseFormat: function parseFormat(format) {\n      if (typeof format.toValue === 'function' && typeof format.toDisplay === 'function') return format; // IE treats \\0 as a string end in inputs (truncating the value),\n      // so it's a bad format delimiter, anyway\n\n      var separators = format.replace(this.validParts, '\\0').split('\\0'),\n          parts = format.match(this.validParts);\n\n      if (!separators || !separators.length || !parts || parts.length === 0) {\n        throw new Error(\"Invalid date format.\");\n      }\n\n      return {\n        separators: separators,\n        parts: parts\n      };\n    },\n    parseDate: function parseDate(date, format, language, assumeNearby) {\n      if (!date) return undefined;\n      if (date instanceof Date) return date;\n      if (typeof format === 'string') format = DPGlobal.parseFormat(format);\n      if (format.toValue) return format.toValue(date, format, language);\n      var fn_map = {\n        d: 'moveDay',\n        m: 'moveMonth',\n        w: 'moveWeek',\n        y: 'moveYear'\n      },\n          dateAliases = {\n        yesterday: '-1d',\n        today: '+0d',\n        tomorrow: '+1d'\n      },\n          parts,\n          part,\n          dir,\n          i,\n          fn;\n\n      if (date in dateAliases) {\n        date = dateAliases[date];\n      }\n\n      if (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/i.test(date)) {\n        parts = date.match(/([\\-+]\\d+)([dmwy])/gi);\n        date = new Date();\n\n        for (i = 0; i < parts.length; i++) {\n          part = parts[i].match(/([\\-+]\\d+)([dmwy])/i);\n          dir = Number(part[1]);\n          fn = fn_map[part[2].toLowerCase()];\n          date = Datepicker.prototype[fn](date, dir);\n        }\n\n        return Datepicker.prototype._zero_utc_time(date);\n      }\n\n      parts = date && date.match(this.nonpunctuation) || [];\n\n      function applyNearbyYear(year, threshold) {\n        if (threshold === true) threshold = 10; // if year is 2 digits or less, than the user most likely is trying to get a recent century\n\n        if (year < 100) {\n          year += 2000; // if the new year is more than threshold years in advance, use last century\n\n          if (year > new Date().getFullYear() + threshold) {\n            year -= 100;\n          }\n        }\n\n        return year;\n      }\n\n      var parsed = {},\n          setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],\n          setters_map = {\n        yyyy: function yyyy(d, v) {\n          return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);\n        },\n        m: function m(d, v) {\n          if (isNaN(d)) return d;\n          v -= 1;\n\n          while (v < 0) {\n            v += 12;\n          }\n\n          v %= 12;\n          d.setUTCMonth(v);\n\n          while (d.getUTCMonth() !== v) {\n            d.setUTCDate(d.getUTCDate() - 1);\n          }\n\n          return d;\n        },\n        d: function d(_d, v) {\n          return _d.setUTCDate(v);\n        }\n      },\n          val,\n          filtered;\n      setters_map['yy'] = setters_map['yyyy'];\n      setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\n      setters_map['dd'] = setters_map['d'];\n      date = UTCToday();\n      var fparts = format.parts.slice(); // Remove noop parts\n\n      if (parts.length !== fparts.length) {\n        fparts = $(fparts).filter(function (i, p) {\n          return $.inArray(p, setters_order) !== -1;\n        }).toArray();\n      } // Process remainder\n\n\n      function match_part() {\n        var m = this.slice(0, parts[i].length),\n            p = parts[i].slice(0, m.length);\n        return m.toLowerCase() === p.toLowerCase();\n      }\n\n      if (parts.length === fparts.length) {\n        var cnt;\n\n        for (i = 0, cnt = fparts.length; i < cnt; i++) {\n          val = parseInt(parts[i], 10);\n          part = fparts[i];\n\n          if (isNaN(val)) {\n            switch (part) {\n              case 'MM':\n                filtered = $(dates[language].months).filter(match_part);\n                val = $.inArray(filtered[0], dates[language].months) + 1;\n                break;\n\n              case 'M':\n                filtered = $(dates[language].monthsShort).filter(match_part);\n                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;\n                break;\n            }\n          }\n\n          parsed[part] = val;\n        }\n\n        var _date, s;\n\n        for (i = 0; i < setters_order.length; i++) {\n          s = setters_order[i];\n\n          if (s in parsed && !isNaN(parsed[s])) {\n            _date = new Date(date);\n            setters_map[s](_date, parsed[s]);\n            if (!isNaN(_date)) date = _date;\n          }\n        }\n      }\n\n      return date;\n    },\n    formatDate: function formatDate(date, format, language) {\n      if (!date) return '';\n      if (typeof format === 'string') format = DPGlobal.parseFormat(format);\n      if (format.toDisplay) return format.toDisplay(date, format, language);\n      var val = {\n        d: date.getUTCDate(),\n        D: dates[language].daysShort[date.getUTCDay()],\n        DD: dates[language].days[date.getUTCDay()],\n        m: date.getUTCMonth() + 1,\n        M: dates[language].monthsShort[date.getUTCMonth()],\n        MM: dates[language].months[date.getUTCMonth()],\n        yy: date.getUTCFullYear().toString().substring(2),\n        yyyy: date.getUTCFullYear()\n      };\n      val.dd = (val.d < 10 ? '0' : '') + val.d;\n      val.mm = (val.m < 10 ? '0' : '') + val.m;\n      date = [];\n      var seps = $.extend([], format.separators);\n\n      for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {\n        if (seps.length) date.push(seps.shift());\n        date.push(val[format.parts[i]]);\n      }\n\n      return date.join('');\n    },\n    headTemplate: '<thead>' + '<tr>' + '<th colspan=\"7\" class=\"datepicker-title\"></th>' + '</tr>' + '<tr>' + '<th class=\"prev\">' + defaults.templates.leftArrow + '</th>' + '<th colspan=\"5\" class=\"datepicker-switch\"></th>' + '<th class=\"next\">' + defaults.templates.rightArrow + '</th>' + '</tr>' + '</thead>',\n    contTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\n    footTemplate: '<tfoot>' + '<tr>' + '<th colspan=\"7\" class=\"today\"></th>' + '</tr>' + '<tr>' + '<th colspan=\"7\" class=\"clear\"></th>' + '</tr>' + '</tfoot>'\n  };\n  DPGlobal.template = '<div class=\"datepicker\">' + '<div class=\"datepicker-days\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datepicker-months\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datepicker-years\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datepicker-decades\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datepicker-centuries\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>';\n  $.fn.datepicker.DPGlobal = DPGlobal;\n  /* DATEPICKER NO CONFLICT\n  * =================== */\n\n  $.fn.datepicker.noConflict = function () {\n    $.fn.datepicker = old;\n    return this;\n  };\n  /* DATEPICKER VERSION\n   * =================== */\n\n\n  $.fn.datepicker.version = '1.9.0';\n\n  $.fn.datepicker.deprecated = function (msg) {\n    var console = window.console;\n\n    if (console && console.warn) {\n      console.warn('DEPRECATED: ' + msg);\n    }\n  };\n  /* DATEPICKER DATA-API\n  * ================== */\n\n\n  $(document).on('focus.datepicker.data-api click.datepicker.data-api', '[data-provide=\"datepicker\"]', function (e) {\n    var $this = $(this);\n    if ($this.data('datepicker')) return;\n    e.preventDefault(); // component click requires us to explicitly show it\n\n    datepickerPlugin.call($this, 'show');\n  });\n  $(function () {\n    datepickerPlugin.call($('[data-provide=\"datepicker-inline\"]'));\n  });\n});","map":null,"metadata":{},"sourceType":"module"}